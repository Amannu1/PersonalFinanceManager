name: Notify Discord on Push (Manual Curl with Commit List)

on:
  workflow_dispatch: # Allows you to trigger it manually from the Actions tab
  push:
    branches:
     - main

jobs:
  notify:
    runs-on: ubuntu-latest # Or ubuntu-22.04 if you suspect issues with 24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for github.event.commits

      - name: Send Discord Notification (JavaScript)
        uses: actions/github-script@v7
        with:
          script: |
            const discordWebhook = process.env.DISCORD_WEBHOOK;
            if (!discordWebhook) {
              core.setFailed("DISCORD_WEBHOOK secret not set.");
              return;
            }

            const githubAvatarUrl = process.env.GITHUB_AVATAR_URL || "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png";
            const repoName = context.repo.owner + '/' + context.repo.repo;
            const branchName = context.ref.replace('refs/heads/', '').replace('refs/tags/', '');
            const pusherName = context.actor;
            const pusherUrl = `https://github.com/${pusherName}`;
            const pusherAvatarUrl = `https://github.com/${pusherName}.png?size=48`;

            // Event specific details are in context.payload
            const commits = context.payload.commits || [];
            const headCommit = context.payload.head_commit || {};
            const headCommitMessageRaw = headCommit.message || "";
            const headCommitUrl = headCommit.url;
            const headCommitTimestamp = headCommit.timestamp;

            const eventCreated = context.payload.created || false;
            const eventDeleted = context.payload.deleted || false;

            const defaultRepoUrl = `https://github.com/${repoName}`;
            const defaultBranchUrl = `https://github.com/${repoName}/tree/${branchName}`;

            function escapeMarkdown(text) {
              if (!text) return "";
              return text.replace(/`/g, '\\`');
            }

            // --- Prepare Variables ---
            const numCommits = commits.length;
            let embedColor = 3447003; // Blue
            let actionTakenDisplay = "Pushed to";
            let commitListDescription = "No distinct commits in this push.";
            let embedTitleRaw = `Push to ${branchName}`;
            let embedUrlFinal = defaultBranchUrl;
            let timestampFinal = new Date().toISOString(); // Default to now

            if (eventDeleted) {
              actionTakenDisplay = "Deleted";
              commitListDescription = `Branch/tag \`${branchName}\` deleted by **${pusherName}**.`;
              embedTitleRaw = `Deleted: ${branchName}`;
              embedColor = 15158332; // Red
              embedUrlFinal = defaultRepoUrl;
            } else if (eventCreated) {
              actionTakenDisplay = "Created";
              embedTitleRaw = `Created: ${branchName}`;
              embedColor = 3066993; // Green
              embedUrlFinal = defaultBranchUrl;
              if (numCommits > 0) {
                actionTakenDisplay = "Created and pushed to";
              } else {
                commitListDescription = `Branch/tag \`${branchName}\` created by **${pusherName}**.`;
              }
            }

            if (numCommits > 0) {
              let commitListLines = [];
              for (const commit of commits) {
                const commitIdShort = (commit.id || '').substring(0, 7);
                const commitUrl = commit.url || '';
                const commitMessageFirstLine = (commit.message || '').split('\n')[0];
                const commitAuthorName = (commit.author && commit.author.name) || 'Unknown Author';

                let commitMessageEscapedMd = escapeMarkdown(commitMessageFirstLine);
                if (commitMessageEscapedMd.length > 70) {
                  commitMessageEscapedMd = commitMessageEscapedMd.substring(0, 67) + "...";
                }
                const commitAuthorNameEscapedMd = escapeMarkdown(commitAuthorName);

                const commitLineMd = `\`[${commitIdShort}](${commitUrl})\`: ${commitMessageEscapedMd} by **${commitAuthorNameEscapedMd}**`;
                commitListLines.push(commitLineMd);
              }
              commitListDescription = commitListLines.join("\n");

              if (numCommits === 1 && headCommitMessageRaw) {
                embedTitleRaw = headCommitMessageRaw.split('\n')[0];
              } else {
                embedTitleRaw = `${numCommits} new commit(s) to ${branchName}`;
              }

              if (headCommitUrl) {
                embedUrlFinal = headCommitUrl;
              }
              if (headCommitTimestamp) {
                timestampFinal = headCommitTimestamp;
              }
            }
            
            if (embedTitleRaw.length > 250) {
              embedTitleRaw = embedTitleRaw.substring(0, 247) + "...";
            }

            // --- Construct JSON Payload ---
            const payload = {
              username: "GitHub Actions Notifier",
              avatar_url: githubAvatarUrl,
              content: `ðŸš€ ${actionTakenDisplay} **${repoName}/${branchName}** by **${pusherName}**.`,
              embeds: [{
                author: {
                  name: pusherName,
                  url: pusherUrl,
                  icon_url: pusherAvatarUrl
                },
                title: embedTitleRaw,
                url: embedUrlFinal,
                description: commitListDescription,
                color: embedColor,
                fields: [
                  {
                    name: "Repository",
                    value: `[${repoName}](https://github.com/${repoName})`,
                    inline: true
                  },
                  {
                    name: "Ref",
                    value: `[\`${branchName}\`](https://github.com/${repoName}/tree/${branchName})`,
                    inline: true
                  },
                  {
                    name: "Triggered by",
                    value: `**${pusherName}**`,
                    inline: true
                  }
                ],
                timestamp: timestampFinal
              }]
            };

            // --- Send to Discord ---
            // For debugging:
            // console.log("Payload:", JSON.stringify(payload, null, 2));

            const response = await fetch(discordWebhook, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`Error sending Discord notification: ${response.status} ${response.statusText}\n${errorText}`);
              // console.log("Failed Payload:", JSON.stringify(payload, null, 2));
            } else {
              console.log("Discord notification sent successfully!");
            }
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GITHUB_AVATAR_URL: "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png"