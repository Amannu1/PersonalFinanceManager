name: Notify Discord on Push (with Commit List)

on:
  push:
    branches:
      - main
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Notification Details
        id: prep_details
        env:
          COMMITS_JSON: ${{ toJSON(github.event.commits) }}
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }} # Message of the latest commit
          REF_NAME: ${{ github.ref_name }} # Branch or tag name
          REPO_NAME: ${{ github.repository }} # owner/repo
          ACTOR: ${{ github.actor }} # User who triggered the workflow
          # Note: github.event.created and github.event.deleted are boolean but come as strings 'true'/'false'
          EVENT_CREATED: ${{ github.event.created }}
          EVENT_DELETED: ${{ github.event.deleted }}
          HEAD_COMMIT_URL_EVENT: ${{ github.event.head_commit.url }}
          HEAD_COMMIT_TIMESTAMP_EVENT: ${{ github.event.head_commit.timestamp }}
          DEFAULT_REPO_URL: "https://github.com/${{ github.repository }}"
          DEFAULT_BRANCH_URL: "https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}"
        run: |
          # Determine number of commits
          # github.event.commits is null if no commits (e.g., branch delete, or new tag on old commit)
          if [[ "${COMMITS_JSON}" == "null" ||  "${COMMITS_JSON}" == "[]" ]]; then
            num_commits=0
          else
            num_commits=$(echo "${COMMITS_JSON}" | jq 'length')
          fi
          echo "num_commits=${num_commits}" >> $GITHUB_OUTPUT

          # --- Set defaults ---
          embed_color=3447003 # Blue (default push/update)
          action_taken="Pushed to"
          commit_list_md="No distinct commits in this push."
          title_text_raw="Push to ${REF_NAME}"
          embed_url_final="${DEFAULT_BRANCH_URL}"
          timestamp_final=$(date -u +"%Y-%m-%dT%H:%M:%SZ") # Current time as fallback

          # --- Handle different event types ---
          if [[ "${EVENT_DELETED}" == "true" ]]; then
            action_taken="Deleted"
            commit_list_md="Branch/tag \`${REF_NAME}\` deleted by **${ACTOR}**."
            title_text_raw="Deleted: ${REF_NAME}"
            embed_color=15158332 # Red
            embed_url_final="${DEFAULT_REPO_URL}"
          elif [[ "${EVENT_CREATED}" == "true" ]]; then
            action_taken="Created"
            title_text_raw="Created: ${REF_NAME}"
            embed_color=3066993 # Green
            embed_url_final="${DEFAULT_BRANCH_URL}"
            if [[ "$num_commits" -gt 0 ]]; then
              action_taken="Created and pushed to" # New branch with commits
              # Commit list and title will be further processed below for commits
            else # New branch/tag from UI without new commits
              commit_list_md="Branch/tag \`${REF_NAME}\` created by **${ACTOR}**."
            fi
          fi

          # --- Process commits if present ---
          if [[ "$num_commits" -gt 0 ]]; then
            # Format: `[SHA](URL)`: Message (first line, truncated) by **Author**
            # Escape backticks in commit messages for Markdown: gsub("`"; "\\\\`")
            # (jq needs \\ for literal \, then shell needs \\ for literal \ -> \\\\)
            # Simpler: gsub("`"; "\\`") as jq is in a script here.
            commit_list_md_temp=$(echo "${COMMITS_JSON}" | jq -r '.[] | "`[\(.id[0:7])](\(.url))`: \(.message | split("\n")[0] | gsub("`"; "\\`") | if (length > 70) then .[0:67] + "..." else . end) by **\(.author.name)**"')
            commit_list_md=$(echo "$commit_list_md_temp" | paste -sd '\n' -)


            if [[ "$num_commits" -eq 1 && "${HEAD_COMMIT_MESSAGE}" != "" ]]; then
              title_text_raw=$(echo "${HEAD_COMMIT_MESSAGE}" | head -n1)
            else
              title_text_raw="${num_commits} new commit(s) to ${REF_NAME}"
            fi

            if [[ "${HEAD_COMMIT_URL_EVENT}" != "" ]]; then
              embed_url_final="${HEAD_COMMIT_URL_EVENT}"
            fi
            if [[ "${HEAD_COMMIT_TIMESTAMP_EVENT}" != "" ]]; then
              timestamp_final="${HEAD_COMMIT_TIMESTAMP_EVENT}"
            fi
          fi

          # --- Finalize outputs ---
          # Multiline output for commit list
          echo "commit_list_md<<COMMIT_LIST_EOF" >> $GITHUB_OUTPUT
          echo "${commit_list_md}" >> $GITHUB_OUTPUT
          echo "COMMIT_LIST_EOF" >> $GITHUB_OUTPUT

          # Truncate title for Discord limit (256 chars)
          if [ ${#title_text_raw} -gt 250 ]; then title_text_raw="${title_text_raw:0:247}..." ; fi
          echo "embed_title=${title_text_raw}" >> $GITHUB_OUTPUT

          echo "embed_url=${embed_url_final}" >> $GITHUB_OUTPUT
          echo "embed_color=${embed_color}" >> $GITHUB_OUTPUT
          echo "action_taken=${action_taken}" >> $GITHUB_OUTPUT
          echo "embed_timestamp=${timestamp_final}" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        uses: crazy-max/ghaction-discord@v4 # Check for the latest version
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          # Overall message content
          content: "ðŸš€ ${{ steps.prep_details.outputs.action_taken }} **${{ github.repository }}/${{ github.ref_name }}** by **${{ github.actor }}**."
          # Embeds (YAML representation of a JSON array of embed objects)
          embeds: |
            [{
              "author": {
                "name": "${{ github.actor }}",
                "url": "https://github.com/${{ github.actor }}",
                "icon_url": "https://github.com/${{ github.actor }}.png?size=48"
              },
              "title": "${{ steps.prep_details.outputs.embed_title }}",
              "url": "${{ steps.prep_details.outputs.embed_url }}",
              "description": "${{ steps.prep_details.outputs.commit_list_md }}",
              "color": ${{ steps.prep_details.outputs.embed_color }},
              "fields": [
                {
                  "name": "Repository",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": true
                },
                {
                  "name": "Ref",
                  "value": "[`${{ github.ref_name }}`](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }})",
                  "inline": true
                },
                {
                  "name": "Triggered by",
                  "value": "**${{ github.actor }}**",
                  "inline": true
                }
              ],
              "timestamp": "${{ steps.prep_details.outputs.embed_timestamp }}"
            }]
